{{define "title"}}
{{if .Recipe.Name}}
{{.Recipe.Name}}
{{else}}
New Recipe
{{end}}
{{end}}

{{define "content"}}
{{if .IsViewMode}}
<section class="grid grid-cols-1 px-4 pb-4 md:grid-cols-3 md:border-r-0">
  {{else}}
  <form action="/recipes/new/manual" method="post" enctype=multipart/form-data
    class="grid grid-cols-1 px-4 pb-4 md:grid-cols-3 md:border-r-0">
    {{end}}
    <div class="col-span-1 text-lg border border-gray-900 md:col-span-2 rounded-t-md">
      {{if .IsViewMode}}
      <h1 class="grid h-full font-bold place-content-center">{{.Recipe.Name}}</h1>
      {{else}}
      <label for="title" class="hidden"></label>
      <input type="text" id="title" name="title" placeholder="Title of the recipe*" required
        class="relative w-full py-2 font-bold text-center text-gray-600 placeholder-gray-400 bg-white border border-gray-400 rounded-t-lg outline-none focus:outline-none focus:ring">
      {{end}}
    </div>

    <div
      class="w-full col-span-1 border-b border-l border-r border-gray-900 place-self-end md:border-b-0 md:border-l-0">
      {{if .IsViewMode}}
      <img src="data:image/jpg;base64,{{.RecipeImageBase64}}" alt="How {{.Recipe.Name}} looks like."
        class="text-center">
      {{else}}
      <img id="output" class="object-cover w-full h-full">
      <label
        class="flex flex-row items-center py-2 tracking-wide text-purple-600 transition-all duration-150 ease-linear bg-white place-content-center hover:bg-purple-600 hover:text-white">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 " fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
        </svg>
        <span class="ml-2">
          Upload an image of the recipe
        </span>
        <input type="file" accept="image/*;capture=camera" capture="camera" name="image" onchange="loadFile(event)"
          class="hidden">
      </label>
      {{end}}
    </div>

    <div class="col-span-1 p-2 border-b border-l border-r border-black md:col-span-2 md:border-r-0">
      {{if .Recipe.Name}}
      <span
        class="flex items-center justify-center p-2 font-medium text-blue-700 bg-blue-100 border border-blue-300 rounded-full ">
        <span class="text-sm font-normal leading-none capitalize">{{.Recipe.Category}}</span>
      </span>
      {{else}}
      <div class="flex flex-col pb-2">
        <label for="category" class="text-sm font-bold text-gray-600">
          Category <sup class="text-red-600">*</sup>
        </label>
        <select id="category" name="category" required class="py-1.5 rounded-lg px-2">
          <option value="">--Please choose an option--</option>
          <option value="dog">Dog</option>
          <option value="cat">Cat</option>
          <option value="hamster">Hamster</option>
          <option value="parrot">Parrot</option>
          <option value="spider">Spider</option>
          <option value="goldfish">Goldfish</option>
        </select>
      </div>
      <div>
        <label for="category-new" class="text-sm font-bold text-gray-600">Category not listed?</label>
        <div class="flex flex-col">
          <input id="category-new" type="text" class="p-2 border border-gray-300 rounded-t-lg "
            placeholder="Add a category" autocomplete="off">
          <button type="button"
            class="col-span-2 duration-300 border border-gray-800 rounded-b-lg hover:bg-gray-800 hover:text-white center"
            onclick="addCategory(event)">
            Add
          </button>
        </div>
      </div>
      {{end}}
    </div>

    <div class="col-span-1 border-b border-l border-r border-black md:col-span-1 md:border-t">
      {{if .Recipe.Name}}
      {{if isUrl .Recipe.Url}}
      <div class="p-2 ">
        <a class="flex justify-center duration-300 border-2 border-gray-800 rounded-lg text-gray-00 hover:bg-gray-800 hover:text-white center"
          href="{{.Recipe.Url}}" target="_blank">
          <button class="text-sm">Source</button>
        </a>
      </div>

      {{else}}
      <p>Source: {{.Recipe.Url}}</p>
      {{end}}
      {{else}}
      <div class="flex flex-col p-2">
        <label for="source" class="text-sm font-bold text-gray-600">
          Source <sup class="text-red-600">*</sup>
        </label>
        <input type="text" name="source" id="source" class="p-2 border border-gray-300 rounded-lg "
          placeholder="Where does it come from?" autocomplete="off" required>
      </div>
      {{end}}
    </div>

    <div class="col-span-1 border-b border-l border-r border-black md:col-span-3">
      {{if .IsViewMode}}
      <p class="p-2 text-sm whitespace-pre-line">{{.Recipe.Description}}</p>
      {{else}}
      <div class="flex flex-col p-2">
        <label for="description" class="text-sm font-bold text-gray-600">
          Description <sup class="text-red-600">*</sup>
        </label>
        <textarea id="description" name="description" rows="10" class="p-2 border border-gray-300 rounded-t-lg "
          placeholder="This Thai curry chicken will make you drool..." required></textarea>
      </div>
      {{end}}
    </div>

    <div class="col-span-1 py-2 border-b border-l border-r border-black md:col-span-1 md:border-r-0">
      {{if .IsViewMode}}
      <p class="text-sm text-center">Yields {{.Recipe.Yield}} servings</p>
      {{else}}
      <div class="relative flex flex-col p-2">
        <label for="yields" class="text-sm font-bold text-gray-600">Yields</label>
        <input type="number" name="yields" id="yields" min="1" value="1" class="p-2 border border-gray-300 rounded-lg ">
        <span class="absolute z-10 font-normal leading-snug text-gray-400 bg-transparent cursor-text bottom-5 right-10">
          servings
        </span>
      </div>
      {{end}}
    </div>

    <div class="col-span-1 border-b border-l border-r border-black md:col-span-1 md:border-r-0">
      <div class="inline-block min-w-full overflow-x-auto align-middle">
        <div class="overflow-hidden border-gray-200">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="h-12 text-sm font-medium tracking-wider text-gray-500 bg-gray-50">
              <tr>
                <th scope="col" class="text-right">Nutrition (per 100g)</th>
                <th scope="col" class="text-center">Amount (optional)</th>
              </tr>
            </thead>
            <tbody class="text-sm text-right text-gray-500 bg-white divide-y divide-gray-200">
              <tr>
                <td>
                  <p>Calories:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.Calories}}
                  {{else}}
                  <label for="calories" class="hidden"></label>
                  <input type="text" id="calories" name="calories" placeholder="368kcal"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Total carbohydrates:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.TotalCarbohydrates}}
                  {{else}}
                  <label for="total-carbohydrates" class="hidden"></label>
                  <input type="text" id="total-carbohydrates" name="total-carbohydrates" placeholder="35g"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Sugars:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.Sugars}}
                  {{else}}
                  <label for="sugars" class="hidden"></label>
                  <input type="text" id="sugars" name="sugars" placeholder="3g"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Protein:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.Protein}}
                  {{else}}
                  <label for="protein" class="hidden"></label>
                  <input type="text" id="protein" name="protein" placeholder="21g"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Total fat:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.TotalFat}}
                  {{else}}
                  <label for="total-fat" class="hidden"></label>
                  <input type="text" id="total-fat" name="total-fat" placeholder="15g"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Saturated fat:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.SaturatedFat}}
                  {{else}}
                  <label for="saturated-fat" class="hidden"></label>
                  <input type="text" id="saturated-fat" name="saturated-fat" placeholder="1.8g"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Cholesterol:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.Cholesterol}}
                  {{else}}
                  <label for="cholesterol" class="hidden"></label>
                  <input type="text" id="cholesterol" name="cholesterol" placeholder="1.1mg"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Sodium:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.Sodium}}
                  {{else}}
                  <label for="sodium" class="hidden"></label>
                  <input type="text" id="sodium" name="sodium" placeholder="100mg"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Fiber:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  {{.Recipe.Nutrition.Fiber}}
                  {{else}}
                  <label for="fiber" class="hidden"></label>
                  <input type="text" id="fiber" name="fiber" placeholder="8g"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-4 00">
                  {{end}}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div class="col-span-1 border-b border-l border-r border-black md:col-span-1">
      <div class="inline-block min-w-full overflow-x-auto align-middle">
        <div class="overflow-hidden border-gray-200">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="h-12 text-sm font-medium tracking-wider text-gray-500 bg-gray-50">
              <tr>
                <th scope="col" class="text-right">Time</th>
                <th scope="col" class="text-center">h:m:s</th>
              </tr>
            </thead>
            <tbody class="text-sm text-right text-gray-500 bg-white divide-y divide-gray-200">
              <tr>
                <td>
                  <p>Preparation:</p>
                </td>
                <td class="py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  <p>{{fmtDuration .Recipe.Times.Prep}}</p>
                  {{else}}
                  <label for="time-preparation" class="hidden"></label>
                  <input type="text" id="time-preparation" name="time-preparation" value="00:15:00"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400 html-duration-picker">
                  {{end}}
                </td>
              </tr>
              <tr>
                <td>
                  <p>Cooking:</p>
                </td>
                <td class="w-1/2 py-3 text-center whitespace-nowrap">
                  {{if .IsViewMode}}
                  <p>{{fmtDuration .Recipe.Times.Cook}}</p>
                  {{else}}
                  <label for="time-cooking" class="hidden"></label>
                  <input type="text" id="time-cooking" name="time-cooking" value="00:30:00"
                    class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400 html-duration-picker">
                  {{end}}
                </td>
              </tr>
              {{if .IsViewMode}}
              <tr>
                <td>
                  <p>Total:</p>
                </td>
                <td class="w-1/2 py-3 text-center whitespace-nowrap">
                  <p>{{fmtDuration .Recipe.Times.Total}}</p>
                </td>
              </tr>
              {{end}}
            </tbody>
          </table>
        </div>
      </div>
    </div>


    <div class="col-span-1 py-2 border-b border-l border-r border-black md:col-span-1 md:border-r-0">
      {{if .IsViewMode}}
      <h2 class="pb-2 m-auto text-sm font-bold text-center text-gray-600 underline ">Ingredients</h2>
      <ul class="grid px-6 list-decimal">
        {{range .Recipe.Ingredients}}
        <label for="ingredient-{{.}}" class="min-w-full py-1 pl-4 text-sm select-none hover:bg-red-600">
          <input type="checkbox" id="ingredient-{{.}}">
          <span class="pl-2">{{.}}</span>
        </label>
        {{end}}
      </ul>
      {{else}}
      <fieldset class="text-center border-none">
        <legend class="pb-2 m-auto text-sm font-bold text-gray-600">
          <span class="underline">Ingredients</span> <sup class="text-red-600 no-underline">*</sup>
        </legend>
        <ol class="pl-6 list-decimal">
          <li class="pl-2">
            <input type="text" name="ingredient-1" placeholder="Ingredient #1" required
              class="w-3/4 py-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
            <button type="button"
              class="w-8 h-8 col-span-2 text-center duration-300 bg-green-300 border border-gray-800 rounded-lg hover:bg-green-600 hover:text-white center"
              onclick="addEntry(event)">
              +
            </button>
            <button type="button"
              class="w-8 h-8 col-span-2 duration-300 bg-red-300 border border-gray-800 rounded-lg hover:bg-red-600 hover:text-white center"
              onclick="removeEntry(event)">
              -
            </button>
          </li>
        </ol>
      </fieldset>
      {{end}}
    </div>

    <div class="col-span-1 py-2 pb-8 border-b border-l border-r border-black md:col-span-2">
      {{if .IsViewMode}}
      display instructions
      {{else}}
      <fieldset class="text-center border-none">
        <legend class="m-auto text-sm font-bold text-gray-600">
          <span class="underline">Instructions</span> <sup class="text-red-600">*</sup>
        </legend>
        <ol class="pl-6 list-decimal">
          <li class="relative pt-2 pl-2">
            <textarea required name="instruction-1" rows="3" class="w-3/4 border border-gray-300 md:w-4/5"
              placeholder="Instruction #1" required></textarea>
            <button type="button"
              class="absolute md:flex-initial w-8 h-8 right-0.5 md:right-auto duration-300 bg-red-300 border border-gray-800 rounded-lg top-3 hover:bg-red-600 hover:text-white center"
              onclick="removeEntry(event)">
              -
            </button>
            <button type="button"
              class="absolute md:flex-initial bottom-0 right-0.5 md:right-auto w-8 h-8 text-center duration-300 bg-green-300 border border-gray-800 rounded-lg hover:bg-green-600 hover:text-white center"
              onclick="addEntry(event)">
              +
            </button>
          </li>
        </ol>
      </fieldset>
      {{end}}
    </div>
    {{if .IsViewMode}}
    </div>
    {{else}}
    <button type="submit"
      class="w-full col-span-1 p-2 font-semibold text-white duration-300 bg-blue-500 md:col-span-3 hover:bg-blue-800">
      Submit
    </button>
  </form>
  {{end}}

  {{if not .IsViewMode}}
  <script src="/static/js/html-duration-picker.min.js"></script>
  <script>
    const loadFile = (event) => {
      const output = document.getElementById('output')
      output.src = URL.createObjectURL(event.target.files[0])
      output.alt = "Uploaded image of the recipe."
      output.onload = () => URL.revokeObjectURL(output.src)
    }

    const addCategory = (event) => {
      const input = event.target.previousElementSibling
      if (!input.value) {
        return
      }

      const category = input.value
      const select = document.getElementById('category')
      const options = [...select.options].map(o => o.value.toLowerCase())
      if (options.includes(category.toLowerCase())) {
        input.value = ""
        return
      }

      const option = document.createElement('option')
      option.text = option.value = category
      select.add(option, select.childElementCount)
      input.value = ""
      select.value = category

      showSuccessToast("Category has been added")
    }

    const adjustPlaceholder = (ol) => {
      Array.from(ol.children).forEach((li, index) => {
        const input = li.firstElementChild
        const name = input.name.split('-')[0]
        input.placeholder = `${name.charAt(0).toUpperCase() + name.slice(1)} #${index + 1}`
      })
    }

    const addEntry = (event) => {
      const li = event.target.parentNode

      const ol = li.parentElement
      for (let i = 0; i < ol.childElementCount; i++) {
        const input = ol.children[i].firstElementChild
        if (input.value === "") {
          input.focus()
          return
        }
      }

      const clone = li.cloneNode(true)
      const cloneInput = clone.firstElementChild
      cloneInput.value = ""

      const [type, i] = li.firstElementChild.name.split('-')
      cloneInput.name = `${type}-${parseInt(i) + 1}`

      ol.appendChild(clone)
      cloneInput.focus()
      adjustPlaceholder(ol)
    }

    const removeEntry = (event) => {
      const ol = event.target.parentElement.parentElement
      if (ol.childElementCount === 1) {
        let input = event.target
        while (!["INPUT", "TEXTAREA"].includes(input.tagName)) {
          input = input.previousElementSibling
        }
        input.value = ""
        return
      }
      event.target.parentNode.remove()
      adjustPlaceholder(ol)
    }

    document.addEventListener('keydown', (event) => {
      const { name } = event.target
      if (event.key === "Enter" && name.startsWith("ingredient")) {
        event.preventDefault()
        addEntry(event)
      }
    })
  </script>
  {{end}}
  {{end}}