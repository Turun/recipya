{{define "title"}}Settings{{end}}

{{define "content"}}
<div class="flex">
  <div id="panes" class="sticky top-0 w-20 h-screen text-center text-white bg-gray-800">
    <hr>
    <p id="pane-profile" class="py-4 border-l-4 border-red-600 select-none hover:bg-red-600">Profile</p>
    <hr>
    <p id="pane-data" class="py-4 select-none hover:bg-red-600">Recipes</p>
    <hr>
  </div>

  <div id="containers" class="flex-grow p-4">
    <div id="container-profile">
      Profile
    </div>
    <div id="container-data" class="grid hidden grid-cols-4">
      <div class="col-span-1 pr-4">Export your personal data:</div>
      <form action="/settings/export" method="post"
        class="col-span-3 p-2 text-sm text-gray-900 duration-300 border-2 border-gray-800 rounded-lg md:text-base hover:bg-gray-800 hover:text-white center">
        <button type="submit" class="w-full">Export recipes</button>
      </form>

      <div class="col-span-1 pr-4 mt-4 text-sm md:text-base">Categories:</div>
      <div class="col-span-3 p-2 mt-4 text-gray-900 border-2 border-gray-800 rounded-lg">
        <ul id="categories" class="leading-6 list-inside">
          {{- range .Categories -}}
          <li id="category-{{.}}" class="flex mb-2">
            <button class="hover:text-red-600">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24"
                stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round"
                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
            <button class="px-4 hover:text-blue-600">
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" fill="none" viewBox="0 0 24 24"
                stroke="currentColor" stroke-width="2">
                <path stroke-linecap="round" stroke-linejoin="round"
                  d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
              </svg>
            </button>
            <span>{{.}}</span>
          </li>
          {{- end -}}
        </ul>
      </div>
    </div>
  </div>
</div>
{{end}}

{{define "js"}}
<script>
  const tabs = Array.from(document.getElementById("panes").children)
  const containers = Array.from(document.getElementById("containers").children)
  const selectedClasses = ["border-l-4", "border-red-600"]

  tabs.forEach(child => {
    if (child.tagName === "HR") {
      return
    }

    child.addEventListener("mousedown", event => {
      tabs.forEach(t => t.classList.remove(...selectedClasses))
      containers.forEach(c => c.classList.add("hidden"))
      event.target.classList.add(...selectedClasses)
      document.getElementById(`container-${event.target.id.split("-")[1]}`).classList.remove("hidden")
    })
  })

  const allCategories = {{.Categories }}
  Array.from(document.getElementById('categories').children).forEach(li => {
    li.firstElementChild.addEventListener('mousedown', event => {
      const category = li.id.replace('category-', '')
      if (confirm(`Are you sure you want to delete category '${category}'?`)) {
        fetch(`${document.location.origin}/recipes/categories`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ category }),
        }).then((res) => {
          li.parentNode.removeChild(li)
          showSuccessToast('Category deleted successfully');
        }).catch((err) => {
          showErrorToast(`Could not delete category: ${err}`);
        });
      }
    })

    li.firstElementChild.nextElementSibling.addEventListener('mousedown', event => {
      let target = event.target
      while (target.tagName !== 'BUTTON') {
        target = target.parentElement
      }
      const icon = target.firstElementChild.firstElementChild
      const checkmarkPath = 'M5 13l4 4L19 7'
      const pencilPath = 'M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z'

      const span = target.nextElementSibling
      if (span.tagName !== 'SPAN') {
        icon.setAttribute('d', pencilPath)

        const categories = {
          old: li.id.split('category-')[1],
          new: target.nextElementSibling.value,
        }

        const newSpan = document.createElement('span')
        newSpan.textContent = categories.new
        target.parentNode.appendChild(newSpan, target.nextSibling)
        target.nextElementSibling.parentNode.removeChild(target.nextElementSibling)

        if (allCategories.filter(c => c !== categories.old).includes(categories.new)) {
          newSpan.textContent = categories.old
          showErrorToast(`Category '${categories.old}' already exists`);
          return
        }

        if (categories.old !== categories.new) {
          li.id = `category-${categories.new}`
          fetch(`${document.location.origin}/recipes/categories`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              category: categories.old,
              newCategory: categories.new,
            }),
          }).then((res) => {
            showSuccessToast(`Category '${categories.old}' updated successfully`);
          }).catch((err) => {
            showErrorToast(`Could not edit category '${categories.old}': ${err}`);
          });
          return
        }

        return
      }

      const input = document.createElement('input')
      input.classList.add('px-4', 'py-2', 'bg-gray-100', 'rounded-lg', 'w-full', 'md:w-1/4')
      input.type = 'text'
      input.name = span.textContent
      input.placeholder = `Edit '${span.textContent}'`
      input.value = span.textContent
      span.parentNode.insertBefore(input, span)
      input.addEventListener('keypress', event => {
        if (event.key === 'Enter') {
          const clickEvent = document.createEvent('MouseEvents');
          clickEvent.initEvent('mousedown', true, true)
          target.dispatchEvent(clickEvent)
        }
      })
      span.remove()

      icon.setAttribute('d', checkmarkPath)
    })
  })
</script>
{{end}}