{{define "title"}}Edit Recipe{{end}}

{{define "content"}}
{{with .Recipe}}
<form id="form__new-recipe" action="/recipes/{{.ID}}/edit" method="post" enctype="multipart/form-data"
  class="grid max-w-6xl grid-cols-6 px-4 pb-4 m-auto">
  <div class="col-span-6 text-lg border border-gray-900 md:text-xl rounded-t-md">
    <label for="title" class="hidden"></label>
    <input type="text" name="title" id="title" placeholder="Title of the recipe*" value="{{.Name}}" required
      class="w-full py-2 font-bold text-center text-gray-600 placeholder-gray-400 rounded-t-lg">
  </div>

  <div
    class="w-full h-full grid-flow-col col-span-6 border-b border-l border-r border-gray-900 place-self-end md:border-b md:border-l md:border-r md:col-span-4">
    <img id="output" class="object-cover w-full text-center md:w-full"
      src="{{if isUuidValid .Image}}/data/img/{{.Image}}{{end}}" alt="Image of the {{.Name}} recipe">
    <label
      class="flex flex-row items-center py-2 tracking-wide text-purple-600 transition-all duration-150 ease-linear bg-white place-content-center hover:bg-purple-600 hover:text-white">
      <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 " fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
      </svg>
      <span class="ml-2">
        Upload an image of the recipe
      </span>
      <input type="file" accept="image/*;capture=camera" capture="camera" name="image" onchange="loadFile(event)"
        class="hidden">
    </label>
  </div>

  <div class="grid grid-flow-row col-span-6 md:col-span-2">
    <div class="col-span-2 gap-4 p-2 border-b border-l border-r border-black md:border-l-0 md:border-r md:col-span-3">
      <label for="category" class="block col-span-2 text-sm font-bold text-gray-600">
        Category <sup class="text-red-600">*</sup>
      </label>
      <select required id="category" name="category" class="w-full block py-1.5 rounded-lg px-2 col-span-2 mb-2"
        value="{{.Category}}">
        <option value="">--Please choose an option--</option>
        <option value="dog">Dog</option>
        <option value="cat">Cat</option>
        <option value="hamster">Hamster</option>
        <option value="parrot">Parrot</option>
        <option value="spider">Spider</option>
        <option value="goldfish">Goldfish</option>
      </select>

      <label for="category-new" class="col-span-2 text-sm font-bold text-gray-600">
        Category not listed?
      </label>
      <div class="flex flex-col">
        <input id="category-new" type="text" class="p-2 border rounded-t-lg " placeholder="Add a category"
          autocomplete="off">
        <button type="button"
          class="col-span-2 duration-300 border border-gray-800 rounded-b-xl hover:bg-gray-800 hover:text-white center"
          onclick="addCategory(event)">
          Add
        </button>
      </div>
    </div>

    <div class="block col-span-2 p-2 border-b border-l border-r border-black md:col-span-3 md:border-l-0 md:border-t-0">
      <div class="relative flex flex-col p-2">
        <label for="yields" class="text-sm font-bold text-gray-600">Yields</label>
        <input type="number" name="yields" id="yields" min="1" value="{{.Yield}}"
          class="p-2 border border-gray-300 rounded-lg ">
        <span class="absolute z-10 font-normal leading-snug text-gray-400 bg-transparent cursor-text bottom-5 right-10">
          servings
        </span>
      </div>
    </div>

    <div class="block col-span-2 p-2 border-b border-l border-r border-black md:col-span-3 md:border-t-0 md:border-l-0">
      <label for="source" class="text-sm font-bold text-gray-600">
        Source <sup class="text-red-600">*</sup>
      </label>
      <input type="text" name="source" id="source" class="block w-full p-2 border border-gray-300 rounded-lg"
        placeholder="Where does it come from?" autocomplete="off" required value="{{.Url}}">
    </div>
  </div>

  <div class="col-span-6 border-b border-l border-r border-black md:col-span-4">
    <div class="flex flex-col p-2">
      <label for="description" class="text-sm font-bold text-gray-600">
        Description <sup class="text-red-600">*</sup>
      </label>
      <textarea id="description" name="description" rows="10" class="p-2 text-sm border border-gray-300 rounded-t-lg "
        placeholder="This Thai curry chicken will make you drool..." required>{{.Description}}</textarea>
    </div>
  </div>

  {{with .Nutrition}}
  <div class="col-span-3 border-b border-l border-r border-black md:border-l-0 md:col-span-1">
    <div class="inline-block min-w-full overflow-x-auto align-middle">
      <div class="overflow-hidden border-gray-200">
        <table class="min-w-full text-xs divide-y divide-gray-200">
          <thead class="h-12 font-medium tracking-wider text-white bg-gray-800">
            <tr>
              <th scope=" col" class="text-right md:text-center">
                <p>Nutrition<br>(per 100g)</p>
              </th>
              <th scope="col" class="text-center">
                <p>
                  Amount<br>(optional)
                </p>
              </th>
            </tr>
          </thead>
          <tbody class="text-right text-gray-500 bg-white divide-y divide-gray-200">
            <tr>
              <td>
                <p>Calories:</p>
              </td>
              <td class="py-3 text-center">
                <label for="calories" class="hidden"></label>
                <input type="text" id="calories" name="calories" placeholder="368kcal" value="{{.Calories}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr class="bg-gray-100">
              <td>
                <p>Total carbohydrates:</p>
              </td>
              <td class="py-3 text-center">
                <label for="total-carbohydrates" class="hidden"></label>
                <input type="text" id="total-carbohydrates" name="total-carbohydrates" placeholder="35g"
                  value="{{.TotalCarbohydrates}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr>
              <td>
                <p>Sugars:</p>
              </td>
              <td class="py-3 text-center">
                <label for="sugars" class="hidden"></label>
                <input type="text" id="sugars" name="sugars" placeholder="3g" value="{{.Sugars}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr class="bg-gray-100">
              <td>
                <p>Protein:</p>
              </td>
              <td class="py-3 text-center">
                <label for="protein" class="hidden"></label>
                <input type="text" id="protein" name="protein" placeholder="21g" value="{{.Protein}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr>
              <td>
                <p>Total fat:</p>
              </td>
              <td class="py-3 text-center">
                <label for="total-fat" class="hidden"></label>
                <input type="text" id="total-fat" name="total-fat" placeholder="15g" value="{{.TotalFat}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr class="bg-gray-100">
              <td>
                <p>Saturated fat:</p>
              </td>
              <td class="py-3 text-center">
                <label for="saturated-fat" class="hidden"></label>
                <input type="text" id="saturated-fat" name="saturated-fat" placeholder="1.8g" value="{{.SaturatedFat}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr>
              <td>
                <p>Cholesterol:</p>
              </td>
              <td class="py-3 text-center">
                <label for="cholesterol" class="hidden"></label>
                <input type="text" id="cholesterol" name="cholesterol" placeholder="1.1mg" value="{{.Cholesterol}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr class="bg-gray-100">
              <td>
                <p>Sodium:</p>
              </td>
              <td class="py-3 text-center">
                <label for="sodium" class="hidden"></label>
                <input type="text" id="sodium" name="sodium" placeholder="100mg" value="{{.Sodium}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
            <tr>
              <td>
                <p>Fiber:</p>
              </td>
              <td class="py-3 text-center">
                <label for="fiber" class="hidden"></label>
                <input type="text" id="fiber" name="fiber" placeholder="8g" value="{{.Fiber}}"
                  class="w-3/4 p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  {{end}}

  {{with .Times}}
  <div class="col-span-3 border-b border-r border-black md:col-span-1">
    <div class="inline-block min-w-full overflow-x-auto align-middle">
      <div class="overflow-hidden border-gray-200">
        <table class="min-w-full text-xs divide-y divide-gray-200">
          <thead class="h-12 font-medium tracking-wider text-white bg-gray-800 border-l border-white">
            <tr>
              <th scope="col" class="text-right">Time</th>
              <th scope="col" class="text-center">h:m:s</th>
            </tr>
          </thead>
          <tbody class="text-right text-gray-500 bg-white divide-y divide-gray-200">
            <tr>
              <td>
                <p>Preparation:</p>
              </td>
              <td class="py-3 text-center">
                <label for="time-preparation" class="hidden"></label>
                <input type="text" id="time-preparation" name="time-preparation" value="{{durationToInput .Prep}}"
                  class="w-full p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400 html-duration-picker">
              </td>
            </tr>
            <tr class="bg-gray-100">
              <td>
                <p>Cooking:</p>
              </td>
              <td class="w-1/2 py-3 text-center">
                <label for="time-cooking" class="hidden"></label>
                <input type="text" id="time-cooking" name="time-cooking" value="{{durationToInput .Cook}}"
                  class="w-full p-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400 html-duration-picker">
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
  {{end}}

  <div class="col-span-6 py-2 border-b border-l border-r border-black md:col-span-2 md:border-r-0">
    <fieldset class="text-center border-none">
      <legend class="pb-2 m-auto text-sm font-bold text-gray-600 ">
        <span class="underline">Ingredients</span> <sup class="text-red-600 no-underline">*</sup>
      </legend>
      <ol id="ingredients__list" class="pl-6 list-decimal">
        {{$len := len .Instructions}}
        {{range $i, $e := .Ingredients}}
        <li class="pb-2 pl-2">
          <input type="text" name="ingredient-{{inc $i}}" placeholder="Ingredient #{{inc $i}}" value="{{$e}}" required
            class="w-8/12 py-1 text-gray-600 placeholder-gray-400 bg-white border border-gray-400">
          <button type="button"
            class="w-10 h-10 text-center duration-300 bg-green-300 border border-gray-800 rounded-lg md:w-7 md:h-7 hover:bg-green-600 hover:text-white center"
            onclick="addEntry(event)">
            +
          </button>
          <button type="button"
            class="w-10 h-10 duration-300 bg-red-300 border border-gray-800 rounded-lg md:w-7 md:h-7 hover:bg-red-600 hover:text-white center"
            onclick="removeEntry(event)">
            -
          </button>
          <div class="inline-block h-4 cursor-move list__move-item">
            <svg xmlns="http://www.w3.org/2000/svg" class="md:w-4 md:h-4 w-7 h-7" fill="none" viewBox="0 0 24 24"
              stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
            </svg>
          </div>
        </li>
        {{end}}
      </ol>
    </fieldset>
  </div>
  <div class="col-span-6 py-2 pb-8 border-b border-l border-r border-black md:col-span-4">
    <fieldset class="text-center border-none">
      <legend class="m-auto text-sm font-bold text-gray-600">
        <span class="underline">Instructions</span> <sup class="text-red-600">*</sup>
      </legend>
      <ol id="instructions__list" class="pl-4 list-decimal">
        {{$len := len .Instructions}}
        {{range $i, $e := .Instructions}}
        <li class="pt-2 pl-2">
          <textarea required name="instruction-{{inc $i}}" rows="3" class="w-9/12 border border-gray-300 md:w-4/5"
            placeholder="Instruction #{{inc $i}}" required>{{$e}}</textarea>
          <div class="inline-flex flex-col-reverse">
            <button type="button"
              class="mt-4 md:flex-initial w-10 h-10 right-0.5 md:w-7 md:h-7 md:right-auto duration-300 bg-red-300 border border-gray-800 rounded-lg top-3 hover:bg-red-600 hover:text-white center"
              onclick="removeEntry(event)">
              -
            </button>
            <button type="button"
              class="md:flex-initial bottom-0 right-0.5 md:w-7 md:h-7 md:right-auto w-10 h-10 text-center duration-300 bg-green-300 border border-gray-800 rounded-lg hover:bg-green-600 hover:text-white center"
              onclick="addEntry(event)">
              +
            </button>
          </div>
          <div class="inline-block h-4 cursor-move list__move-item">
            <svg xmlns="http://www.w3.org/2000/svg" class="md:w-4 md:h-4 w-7 h-7" fill="none" viewBox="0 0 24 24"
              stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M7 16V4m0 0L3 8m4-4l4 4m6 0v12m0 0l4-4m-4 4l-4-4" />
            </svg>
          </div>
        </li>
        {{end}}
      </ol>
    </fieldset>
  </div>
  <button type="submit" class="col-span-6 p-2 font-semibold text-white duration-300 bg-blue-500 hover:bg-blue-800">
    Update
  </button>
</form>
{{end}}
{{end}}

{{define "js"}}
<script src="https://cdn.jsdelivr.net/npm/sortablejs@latest/Sortable.min.js"></script>
<script src="/static/js/html-duration-picker.min.js"></script>
<script>
  // Init
  const options = [...document.getElementById('category').options]
  for (let i = 0; i < options.length; i++) {
    const o = options[i]
    if (o.value.toLowerCase() === "{{.Recipe.Category}}".toLowerCase()) {
      o.selected = "selected"
      break
    }
  }

  const loadFile = (event) => {
    const output = document.getElementById('output')
    output.src = URL.createObjectURL(event.target.files[0])
    output.alt = "Uploaded image of the recipe."
    output.onload = () => URL.revokeObjectURL(output.src)
    output.classList.remove('hidden')
  }

  const addCategory = (event) => {
    const input = event.target.previousElementSibling
    if (!input.value) {
      return
    }

    const category = input.value
    const select = document.getElementById('category')
    const options = [...select.options].map(o => o.value.toLowerCase())
    if (options.includes(category.toLowerCase())) {
      input.value = ""
      return
    }

    const option = document.createElement('option')
    option.text = option.value = category
    select.add(option, select.childElementCount)
    input.value = ""
    select.value = category

    showSuccessToast("Category has been added")
  }

  const adjustPlaceholder = (ol) => {
    Array.from(ol.children).forEach((li, index) => {
      const input = li.firstElementChild
      const name = input.name.split('-')[0]
      input.placeholder = `${name.charAt(0).toUpperCase() + name.slice(1)} #${index + 1}`
    })
  }

  const addEntry = (event) => {
    let li = event.target.parentNode
    while (li.tagName !== "LI") {
      li = li.parentNode
    }

    const ol = li.parentElement
    for (let i = 0; i < ol.childElementCount; i++) {
      const input = ol.children[i].firstElementChild
      if (input.value === "") {
        input.focus()
        return
      }
    }

    const clone = li.cloneNode(true)
    const cloneInput = clone.firstElementChild
    cloneInput.value = ""

    const [type, i] = li.firstElementChild.name.split('-')
    cloneInput.name = `${type}-${parseInt(i) + 1}`

    ol.appendChild(clone)
    cloneInput.focus()
    adjustPlaceholder(ol)
  }

  const removeEntry = (event) => {
    let li = event.target
    while (li.tagName !== "LI") {
      li = li.parentNode
    }

    let ol = li.parentNode
    while (ol.tagName !== 'OL') {
      ol = ol.parentNode
    }

    if (li.parentNode.childElementCount === 1) {
      let input = Array.from(li.children).find(el => ["INPUT", "TEXTAREA"].includes(el.tagName))
      input.value = ""
      return
    }

    li.firstElementChild.parentNode.remove()
    adjustPlaceholder(ol)
  }

  document.addEventListener('keydown', (event) => {
    const { name } = event.target
    if (event.key === "Enter" && name.startsWith("ingredient")) {
      event.preventDefault()
      addEntry(event)
    }
  })

  const form = document.getElementById('form__new-recipe')
  let isFormDirty = false
  form.addEventListener('change', () => { isFormDirty = true })
  form.addEventListener('submit', () => { isFormDirty = false })
  window.addEventListener('beforeunload', (event) => {
    if (isFormDirty) {
      event.returnValue = 'Are you sure you want to leave to unfinished changes?'
    }
  })

  const makeListDraggable = (target) => {
    Sortable.create(document.getElementById(target), {
      handle: '.list__move-item',
      forceFallback: true,
      onEnd: function ({ target }) {
        const pluralName = target.id.split('__')[0]
        const singularName = pluralName.substr(0, pluralName.length - 1)

        Array.from(target.children).forEach((li, index) => {
          const input = li.firstElementChild
          input.name = `${singularName}-${index + 1}`
          input.placeholder = `${singularName[0].toUpperCase() + singularName.slice(1)} #${index + 1}`
        })
      }
    })
  }

  makeListDraggable('ingredients__list')
  makeListDraggable('instructions__list')
</script>
{{end}}